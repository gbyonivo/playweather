// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Current component renders correctly 1`] = `
<MemoryRouter
  initialEntries={
    Array [
      Object {
        "key": "testKey",
        "match": Object {
          "params": Object {
            "type": "current",
          },
        },
        "pathname": "/",
      },
    ]
  }
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "testKey",
            "match": Object {
              "params": Object {
                "type": "current",
              },
            },
            "pathname": "/",
            "search": "",
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "testKey",
          "match": Object {
            "params": Object {
              "type": "current",
            },
          },
          "pathname": "/",
          "search": "",
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <Connect(CurrentWeather)
        fetchData={[Function]}
      >
        <CurrentWeather
          activeLocation="venice"
          currentWeather={Object {}}
          dispatch={[Function]}
          fetchData={[Function]}
          isFetchingCurrentWeather={false}
        >
          <div
            className="current"
          >
            <div
              className="message"
            >
              Type City and Country Code or just City Then Hit Search e.g. Manchester or Manchester, UK
            </div>
          </div>
        </CurrentWeather>
      </Connect(CurrentWeather)>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`Current component renders correctly 2`] = `
<MemoryRouter
  initialEntries={
    Array [
      Object {
        "key": "testKey",
        "match": Object {
          "params": Object {
            "type": "current",
          },
        },
        "pathname": "/",
      },
    ]
  }
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "testKey",
            "match": Object {
              "params": Object {
                "type": "current",
              },
            },
            "pathname": "/",
            "search": "",
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "testKey",
          "match": Object {
            "params": Object {
              "type": "current",
            },
          },
          "pathname": "/",
          "search": "",
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <Connect(CurrentWeather)
        fetchData={[Function]}
      >
        <CurrentWeather
          activeLocation="venice"
          currentWeather={
            Object {
              "cod": 1,
              "main": Object {
                "humidity": "x",
                "temp": "10",
              },
              "sys": Object {
                "sunrise": 1531694193,
                "sunset": 1531694193,
              },
              "weather": Array [],
              "wind": Object {
                "deg": "3",
                "speed": "5",
              },
            }
          }
          dispatch={[Function]}
          fetchData={[Function]}
          isFetchingCurrentWeather={false}
        >
          <div
            className="current"
          >
            <div>
              <h4>
                venice
              </h4>
              <div
                className="currentWeatherDetails"
              >
                <DetailItemWrapper
                  headerText="Cloudiness"
                >
                  <div
                    className="currentDetailItemWrapper"
                  >
                    <h2>
                      Cloudiness
                    </h2>
                    <WeatherIcons
                      isWithText={true}
                      weather={Array []}
                    >
                      <div
                        className="weatherIcons"
                      />
                    </WeatherIcons>
                  </div>
                </DetailItemWrapper>
                <DetailItemWrapper
                  headerText="Temperature"
                >
                  <div
                    className="currentDetailItemWrapper"
                  >
                    <h2>
                      Temperature
                    </h2>
                    <div
                      className="temperature"
                    >
                      10
                    </div>
                  </div>
                </DetailItemWrapper>
                <DetailItemWrapper
                  headerText="Wind"
                >
                  <div
                    className="currentDetailItemWrapper"
                  >
                    <h2>
                      Wind
                    </h2>
                    <div>
                      <div
                        className="windSpeed"
                      >
                        <em>
                          spd
                        </em>
                        5
                      </div>
                      <div
                        className="windDeg"
                      >
                        <em>
                          dir
                        </em>
                        3
                      </div>
                    </div>
                  </div>
                </DetailItemWrapper>
                <DetailItemWrapper
                  headerText="Humidity"
                >
                  <div
                    className="currentDetailItemWrapper"
                  >
                    <h2>
                      Humidity
                    </h2>
                    <div
                      className="humidity"
                    >
                      x
                    </div>
                  </div>
                </DetailItemWrapper>
                <DetailItemWrapper
                  headerText="Sunrise"
                >
                  <div
                    className="currentDetailItemWrapper"
                  >
                    <h2>
                      Sunrise
                    </h2>
                    <div
                      className="sunrise"
                    >
                      23:36
                    </div>
                  </div>
                </DetailItemWrapper>
                <DetailItemWrapper
                  headerText="Sunset"
                >
                  <div
                    className="currentDetailItemWrapper"
                  >
                    <h2>
                      Sunset
                    </h2>
                    <div
                      className="sunset"
                    >
                      23:36
                    </div>
                  </div>
                </DetailItemWrapper>
              </div>
            </div>
          </div>
        </CurrentWeather>
      </Connect(CurrentWeather)>
    </Provider>
  </Router>
</MemoryRouter>
`;
